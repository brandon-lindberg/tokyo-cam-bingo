<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tokyo Cam Bingo</title>

  <!-- PWA Meta Tags -->
  <meta name="description" content="Play bingo while watching Tokyo live streams with friends">
  <meta name="theme-color" content="#FF69B4">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/site.webmanifest">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="apple-mobile-web-app-title" content="TCB">

  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&family=Roboto&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="/js/pwa-install.js" defer></script>
</head>
<body>
  <div class="container welcome-container" style="margin: 0 auto;">
    <h1>Welcome to Tokyo Cam Bingo</h1>
    <div class="button-group">
      <button onclick="showHostForm()">Host Game</button>
      <button onclick="showJoinForm()">Join Game</button>
    </div>
    <div style="text-align: center; margin-top: 1rem;">
      <a href="/card-builder" style="color: #00BFFF; text-decoration: none; font-size: 1rem;">
        + Create Custom Card
      </a>
    </div>
    <div style="text-align: center; margin-top: 2rem;">
      <img src="/tokyo-cam-bingo.png" alt="Tokyo Cam Bingo" style="max-width: 300px; width: 100%; height: auto;">
    </div>
    
    <div id="host-form" style="display: none;">
      <h2>Create Game</h2>
      <form action="/create" method="POST" class="create-game-form">

        <!-- Player Info Section -->
        <div class="form-section">
          <label class="form-label">Your Name</label>
          <input type="text" name="hostName" class="form-input" placeholder="Enter your name" required>
        </div>

        <!-- Game Mode Section -->
        <div class="form-section">
          <label class="form-label">Game Mode</label>
          <div class="mode-selector">
            <label class="mode-option">
              <input type="radio" name="modeType" value="REGULAR" checked onchange="toggleHostColorSelection()">
              <div class="mode-card">
                <div class="mode-title">Regular Mode</div>
                <div class="mode-description">Each player gets their own unique card (up to 10 players)</div>
              </div>
            </label>
            <label class="mode-option">
              <input type="radio" name="modeType" value="VS" id="vsMode" onchange="toggleHostColorSelection()">
              <div class="mode-card">
                <div class="mode-title">VS Mode</div>
                <div class="mode-description">All players share one card and compete for squares (max 4 players)</div>
              </div>
            </label>
          </div>
        </div>

        <!-- Color Selection (VS Mode Only) -->
        <div id="host-color-selection" class="form-section" style="display: none;">
          <label class="form-label">Your Color</label>
          <select id="hostColor" name="hostColor" class="form-select">
            <option value="">-- Select Your Color --</option>
            <option value="RED">ðŸ”´ Red</option>
            <option value="BLUE">ðŸ”µ Blue</option>
            <option value="GREEN">ðŸŸ¢ Green</option>
            <option value="YELLOW">ðŸŸ¡ Yellow</option>
            <option value="PURPLE">ðŸŸ£ Purple</option>
            <option value="ORANGE">ðŸŸ  Orange</option>
            <option value="PINK">ðŸ©· Pink</option>
            <option value="CYAN">ðŸ”µ Cyan</option>
          </select>
        </div>

        <!-- Custom Card Section -->
        <div class="form-section">
          <label class="form-label">Card Selection (Optional)</label>
          <input type="text" id="customCardCode" name="customCardCode" class="form-input" placeholder="Enter custom card code (leave blank for default Tokyo Cam Bingo Card)" maxlength="6">
          <div id="custom-card-info" style="margin-top: 0.5rem; font-size: 0.9rem; color: #666;"></div>
        </div>

        <!-- Game Options Section -->
        <div class="form-section">
          <label class="form-label">Game Options</label>
          <div class="options-grid">
            <label class="option-checkbox">
              <input type="checkbox" id="flagsEnabled" name="flagsEnabled" value="true" checked>
              <span class="checkbox-label">
                <span class="checkbox-title">ðŸš© Flag System</span>
                <span class="checkbox-description">Players can challenge questionable stamps</span>
              </span>
            </label>
            <label class="option-checkbox">
              <input type="checkbox" id="rerollsEnabled" name="rerollsEnabled" value="true" checked>
              <span class="checkbox-label">
                <span class="checkbox-title">ðŸŽ² Rerolls</span>
                <span class="checkbox-description">Host can re-roll tiles during the game</span>
              </span>
            </label>
          </div>
        </div>

        <!-- Win Conditions Section -->
        <div class="form-section">
          <label class="form-label">Win Conditions (select at least one)</label>
          <div class="win-conditions-modern">
            <label class="win-option" data-modes="regular,vs">
              <input type="checkbox" id="row" name="winConditions" value="row">
              <span class="win-label">1 Row</span>
            </label>
            <label class="win-option" data-modes="regular">
              <input type="checkbox" id="2rows" name="winConditions" value="2rows">
              <span class="win-label">2 Rows</span>
            </label>
            <label class="win-option" data-modes="regular">
              <input type="checkbox" id="3rows" name="winConditions" value="3rows">
              <span class="win-label">3 Rows</span>
            </label>
            <label class="win-option" data-modes="regular,vs">
              <input type="checkbox" id="column" name="winConditions" value="column">
              <span class="win-label">1 Column</span>
            </label>
            <label class="win-option" data-modes="regular">
              <input type="checkbox" id="2columns" name="winConditions" value="2columns">
              <span class="win-label">2 Columns</span>
            </label>
            <label class="win-option" data-modes="regular">
              <input type="checkbox" id="3columns" name="winConditions" value="3columns">
              <span class="win-label">3 Columns</span>
            </label>
            <label class="win-option" data-modes="regular,vs">
              <input type="checkbox" id="diagonals" name="winConditions" value="diagonals">
              <span class="win-label">Diagonals</span>
            </label>
            <label class="win-option" data-modes="regular">
              <input type="checkbox" id="full" name="winConditions" value="full">
              <span class="win-label">Full Card</span>
            </label>
            <label class="win-option" data-modes="vs">
              <input type="checkbox" id="most_squares" name="winConditions" value="most_squares">
              <span class="win-label">Most Squares</span>
            </label>
          </div>
        </div>

        <button type="submit" class="create-button">Create Game</button>
      </form>
    </div>
    
    <div id="join-form" style="display: none;">
      <h2>Join Game</h2>
      <form id="join-game-form" action="/join" method="POST">
        <input type="password" id="join-code" name="code" placeholder="Game Code" required>
        <input type="text" name="playerName" placeholder="Your Name" required>
        <div id="color-selection" style="display: none; margin: 1rem 0;">
          <label for="playerColor">Choose Your Color:</label>
          <select id="playerColor" name="playerColor" required>
            <option value="">-- Select Color --</option>
            <option value="RED">Red</option>
            <option value="BLUE">Blue</option>
            <option value="GREEN">Green</option>
            <option value="YELLOW">Yellow</option>
            <option value="PURPLE">Purple</option>
            <option value="ORANGE">Orange</option>
            <option value="PINK">Pink</option>
            <option value="CYAN">Cyan</option>
          </select>
        </div>
        <button type="submit">Join</button>
      </form>
    </div>
  </div>

  <script>
    function showHostForm() {
      document.getElementById('host-form').style.display = 'block';
      document.getElementById('join-form').style.display = 'none';
    }

    function showJoinForm() {
      document.getElementById('join-form').style.display = 'block';
      document.getElementById('host-form').style.display = 'none';
    }

    function toggleHostColorSelection() {
      const vsModeChecked = document.getElementById('vsMode').checked;
      const colorSelection = document.getElementById('host-color-selection');
      const colorSelect = document.getElementById('hostColor');

      // Toggle color selection
      if (vsModeChecked) {
        colorSelection.style.display = 'block';
        colorSelect.required = true;
      } else {
        colorSelection.style.display = 'none';
        colorSelect.required = false;
      }

      // Filter win conditions based on mode
      const mode = vsModeChecked ? 'vs' : 'regular';
      const winOptions = document.querySelectorAll('.win-option');

      winOptions.forEach(option => {
        const modes = option.getAttribute('data-modes');
        const checkbox = option.querySelector('input[type="checkbox"]');

        if (modes.includes(mode)) {
          option.style.display = 'block';
        } else {
          option.style.display = 'none';
          // Uncheck hidden options
          checkbox.checked = false;
        }
      });
    }

    // Check custom card code when entered
    const customCardCodeInput = document.getElementById('customCardCode');
    const customCardInfo = document.getElementById('custom-card-info');

    if (customCardCodeInput) {
      customCardCodeInput.addEventListener('input', function(e) {
        this.value = this.value.toUpperCase();
      });

      customCardCodeInput.addEventListener('blur', async function() {
        const code = this.value.trim().toUpperCase();
        customCardInfo.textContent = '';
        customCardInfo.style.color = '#666';

        if (code.length === 6) {
          try {
            const response = await fetch(`/api/card-collections/${code}`);
            if (response.ok) {
              const cardData = await response.json();
              customCardInfo.textContent = `âœ“ "${cardData.name}" loaded (${cardData.itemCount} items)`;
              customCardInfo.style.color = '#10B981';
            } else {
              customCardInfo.textContent = 'âœ— Custom card not found';
              customCardInfo.style.color = '#EF4444';
            }
          } catch (err) {
            console.error('Failed to fetch card:', err);
            customCardInfo.textContent = 'âœ— Error loading card';
            customCardInfo.style.color = '#EF4444';
          }
        }
      });
    }

    // Check game mode when code is entered
    const joinCodeInput = document.getElementById('join-code');
    const colorSelection = document.getElementById('color-selection');
    const playerColorSelect = document.getElementById('playerColor');

    joinCodeInput.addEventListener('blur', async function() {
      const code = this.value.trim().toUpperCase();
      if (code.length === 6) {
        try {
          const response = await fetch(`/game-info/${code}`);
          if (response.ok) {
            const gameInfo = await response.json();
            if (gameInfo.mode === 'VS') {
              // Show color selection and filter available colors
              colorSelection.style.display = 'block';
              playerColorSelect.required = true;

              // Disable already taken colors
              const allColors = ['RED', 'BLUE', 'GREEN', 'YELLOW', 'PURPLE', 'ORANGE', 'PINK', 'CYAN'];
              const takenColors = gameInfo.takenColors || [];

              Array.from(playerColorSelect.options).forEach(option => {
                if (option.value && takenColors.includes(option.value)) {
                  option.disabled = true;
                  option.textContent = option.textContent + ' (taken)';
                } else if (option.value) {
                  option.disabled = false;
                  option.textContent = option.value.charAt(0) + option.value.slice(1).toLowerCase();
                }
              });
            } else {
              colorSelection.style.display = 'none';
              playerColorSelect.required = false;
            }
          }
        } catch (err) {
          console.error('Failed to fetch game info:', err);
        }
      }
    });
  </script>
</body>
</html>