<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tokyo Cam Bingo</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&family=Roboto&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/game.js"></script>
</head>
<body data-game-id="<%= game.id %>" data-player-id="<%= currentPlayer.id %>" data-player-name="<%= currentPlayer.name %>" data-is-host="<%= currentPlayer.isHost %>" data-game-status="<%= game.status %>">
  <div class="container">
    <div class="game-header">
      <h1 style="font-size: 0.9rem;">Win Conditions: <%= game.rules.winConditions && game.rules.winConditions.length > 0 ? game.rules.winConditions.join(', ') : 'None' %></h1>
      <div class="header-controls" style="display:flex;;gap:0.5rem;">
        <% if (currentPlayer.isHost) { %>
          <div class="copy-code-wrapper">
            <button onclick="copyGameCode()">Copy Code</button>
            <span id="copy-confirm" style="display:block;margin-top:0.25rem;color:#4CAF50;visibility:hidden;">Code copied!</span>
          </div>
        <% } %>
        <div class="chat-icon-wrapper" style="position:relative;">
          <button id="chat-toggle-desktop" class="chat-toggle-button">
            <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24"><path d="M2 2h20v18l-4-4H2V2z"/></svg>
          </button>
          <span id="chat-notification" class="notification-badge" style="display:none;">!</span>
        </div>
      </div>
    </div>
    
    <div id="game-over" style="display: none; font-size: 24px; color: red; margin-bottom: 20px;">
      Game Over! <span id="winner-name"></span> wins!
    </div>
    <% if (currentPlayer.isHost) { %>
      <div id="host-options" style="display: none; margin-bottom: 20px;">
        <button onclick="startNewGame()">Start New Game</button>
        <button onclick="location.href = '/'">Exit to Home</button>
      </div>
    <% } %>
    
    <div class="game-layout">
      <div class="card-section">
        <h2>Your Card</h2>
        <table id="card-<%= currentPlayer.id %>" class="bingo-card own-card">
          <% currentPlayer.card.forEach((row, r) => { %>
            <tr>
              <% row.forEach((tile, c) => { %>
                <td class="<%= tile.stamped ? 'stamped' : '' %>" data-row="<%= r %>" data-col="<%= c %>">
                  <div class="tile-content"><%= tile.item %></div>
                </td>
              <% }) %>
            </tr>
          <% }) %>
        </table>
        
        <% if (currentPlayer.isHost) { %>
          <h3>Re-roll for Yourself</h3>
          <button onclick="enterRerollMode('<%= currentPlayer.id %>')">Enter Re-roll Mode</button>
          <div id="reroll-mode-<%= currentPlayer.id %>" style="display: none;">
            <select id="reroll-type-<%= currentPlayer.id %>" onchange="handleTypeChange('<%= currentPlayer.id %>')">
              <option value="">Select Type</option>
              <option value="tile">Tile</option>
              <option value="row">Row</option>
              <option value="column">Column</option>
              <option value="diagonal">Diagonal</option>
              <option value="card">Whole Card</option>
            </select>
            <p id="selection-instruct-<%= currentPlayer.id %>">Click on the card to select the area.</p>
            <button onclick="confirmReroll('<%= currentPlayer.id %>')">Confirm Re-roll</button>
            <button onclick="exitRerollMode('<%= currentPlayer.id %>')">Cancel</button>
          </div>
        <% } %>
      </div>
      
      <div class="leaderboard-section desktop-only">
        <h2>Leaderboard</h2>
        <table id="leaderboard">
          <thead>
            <tr>
              <th>Rank</th>
              <th>Player</th>
              <th>Lines</th>
              <th>Stamped Tiles</th>
            </tr>
          </thead>
          <tbody>
            <!-- Populated by JS -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Bottom App Bar for Mobile -->
  <div class="bottom-app-bar mobile-only">
    <button onclick="toggleDrawer('leaderboard')">Leaderboard</button>
    <button id="chat-toggle-mobile" class="chat-toggle-button">
      <svg width="24" height="24" fill="currentColor" viewBox="0 0 24 24"><path d="M2 2h20v18l-4-4H2V2z"/></svg>
    </button>
  </div>

  <!-- Slide-up Drawer -->
  <div id="drawer" class="drawer">
    <div class="drawer-content">
      <!-- Content populated dynamically -->
    </div>
    <button class="close-drawer" onclick="closeDrawer()">Close</button>
  </div>

  <!-- Winner Modal -->
  <div id="winner-modal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); align-items:center; justify-content:center; z-index:1001;">
    <div style="background:#fff; padding:2rem; border-radius:8px; text-align:center; max-width:90%; margin:auto;">
      <h2 id="winner-modal-text">Winner!</h2>
      <button onclick="closeWinnerModal()" style="margin-top:1rem;">OK</button>
    </div>
  </div>
  <!-- Modal for opponent cards -->
  <div id="player-modal" style="display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
    <div class="modal-content" style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 800px;">
      <span onclick="closeModal()" style="cursor: pointer; float: right; font-size: 28px;">Ã—</span>
      <h2 id="modal-player-name"></h2>
      <table id="modal-card" class="bingo-card"></table>
      <div id="modal-reroll" style="display: none;">
        <h3>Re-roll</h3>
        <select id="modal-reroll-type">
          <option value="">Select Type</option>
          <option value="tile">Tile</option>
          <option value="row">Row</option>
          <option value="column">Column</option>
          <option value="diagonal">Diagonal</option>
          <option value="card">Whole Card</option>
        </select>
        <p id="modal-selection-instruct">Click on the card to select the area.</p>
        <button id="modal-confirm-reroll">Confirm Re-roll</button>
        <button onclick="exitModalReroll()">Cancel</button>
      </div>
    </div>
  </div>
  
  <div id="chat-panel" class="chat-panel">
    <div class="chat-header">
      <h2>Chat</h2>
      <button id="chat-close-desktop">&times;</button>
    </div>
    <div id="chat-messages" class="chat-messages"></div>
    <div class="chat-input">
      <input id="chat-input" type="text" maxlength="300" placeholder="Type a message..." />
      <button id="chat-send">Send</button>
    </div>
  </div>
  
  <script id="chat-data" type="application/json"><%- JSON.stringify({ players, messages }) %></script>
  <script>
    const socket = io();
    window.socket = socket;
    const gameId = document.body.dataset.gameId;
    const playerId = document.body.dataset.playerId;
    const playerName = document.body.dataset.playerName;
    const isHost = document.body.dataset.isHost === 'true';
    let isGameOver = document.body.dataset.gameStatus === 'ended';
    let allPlayers = []; // Global to store all players
    let modalOpenPlayerId = null; // Track open modal player
    socket.emit('join_room', { gameId, playerId });
    
    // Update state
    socket.on('update_state', (data) => {
      const { game, players } = data;
      allPlayers = players; // Update global
      const currentCardTable = document.getElementById(`card-${playerId}`);
      const currentPlayerData = players.find(p => p.id === playerId);
      if (currentPlayerData) {
        currentPlayerData.card.forEach((row, r) => {
          row.forEach((tile, c) => {
            const td = currentCardTable.rows[r].cells[c];
            td.querySelector('.tile-content').textContent = tile.item;
            td.classList.toggle('stamped', tile.stamped);
          });
        });
      }
      updateLeaderboard(players);
      
      if (game.status === 'ended' && !isGameOver) {
        isGameOver = true;
        document.getElementById('game-over').style.display = 'block';
        document.getElementById('winner-name').textContent = game.winner;
        if (isHost) {
          document.getElementById('host-options').style.display = 'block';
        }
      } else if (game.status === 'active' && isGameOver) {
        isGameOver = false;
        document.getElementById('game-over').style.display = 'none';
        if (isHost) {
          document.getElementById('host-options').style.display = 'none';
        }
      }

      // Update modal if open
      if (modalOpenPlayerId) {
        const updatedPlayer = players.find(p => p.id === modalOpenPlayerId);
        if (updatedPlayer) {
          const modalCard = document.getElementById('modal-card');
          modalCard.innerHTML = '';
          updatedPlayer.card.forEach((row, r) => {
            const tr = document.createElement('tr');
            row.forEach((tile, c) => {
              const td = document.createElement('td');
              const div = document.createElement('div');
              div.className = 'tile-content';
              div.textContent = tile.item;
              td.appendChild(div);
              td.classList.toggle('stamped', tile.stamped);
              td.dataset.row = r;
              td.dataset.col = c;
              tr.appendChild(td);
            });
            modalCard.appendChild(tr);
          });
        }
      }
    });
    
    // Replace native alert with custom modal
    socket.on('win', ({ playerName }) => {
      showWinnerModal(playerName);
    });
    
    // Stamp on click (only own card)
    document.querySelectorAll('#card-<%= currentPlayer.id %> td').forEach(td => {
      td.addEventListener('click', (e) => {
        if (isGameOver || td.closest('table').classList.contains('reroll-mode')) return;
        const row = td.dataset.row;
        const col = td.dataset.col;
        socket.emit('stamp', { gameId, playerId, row, col });
      });
    });
    // Hanko cursor scaling on own card tiles
    (function(){
      const hankoImg = new Image();
      hankoImg.src = '/images/hanko.png';
      hankoImg.onload = () => {
        function applyHankoCursor() {
          document.querySelectorAll('#card-<%= currentPlayer.id %> td:not(.stamped)').forEach(td => {
            const width = td.offsetWidth;
            const height = td.offsetHeight;
            const scale = 0.8;
            const cw = Math.round(width * scale);
            const ch = Math.round(height * scale);
            const canvas = document.createElement('canvas');
            canvas.width = cw;
            canvas.height = ch;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(hankoImg, 0, 0, cw, ch);
            const xHot = Math.round(cw / 2);
            const yHot = ch;
            const dataURL = canvas.toDataURL('image/png');
            td.style.cursor = `url(${dataURL}) ${xHot} ${yHot}, auto`;
          });
        }
        applyHankoCursor();
        socket.on('update_state', applyHankoCursor);
      };
    })();

    function startNewGame() {
      socket.emit('new_game', { gameId });
    }

    function copyGameCode() {
      fetch('/get-code')
        .then(res => {
          if (!res.ok) throw new Error('Failed to fetch code');
          return res.text();
        })
        .then(code => navigator.clipboard.writeText(code))
        .then(() => {
          const confirmEl = document.getElementById('copy-confirm');
          confirmEl.style.visibility = 'visible';
          confirmEl.style.color = '#4CAF50';
          confirmEl.textContent = 'Code copied!';
          setTimeout(() => { confirmEl.style.visibility = 'hidden'; }, 3000);
        })
        .catch(err => {
          const confirmEl = document.getElementById('copy-confirm');
          confirmEl.style.visibility = 'visible';
          confirmEl.style.color = 'red';
          confirmEl.textContent = 'Copy failed';
          setTimeout(() => { confirmEl.style.visibility = 'hidden'; }, 3000);
        });
    }

    function showPlayerCard(targetPlayerId) {
      modalOpenPlayerId = targetPlayerId;
      const player = allPlayers.find(p => p.id === targetPlayerId);
      if (!player) return;

      document.getElementById('modal-player-name').textContent = player.name + "'s Card";
      const modalCard = document.getElementById('modal-card');
      modalCard.innerHTML = '';
      player.card.forEach((row, r) => {
        const tr = document.createElement('tr');
        row.forEach((tile, c) => {
          const td = document.createElement('td');
          const div = document.createElement('div');
          div.className = 'tile-content';
          div.textContent = tile.item;
          td.appendChild(div);
          td.classList.toggle('stamped', tile.stamped);
          td.dataset.row = r;
          td.dataset.col = c;
          tr.appendChild(td);
        });
        modalCard.appendChild(tr);
      });

      const modalReroll = document.getElementById('modal-reroll');
      modalReroll.style.display = isHost ? 'block' : 'none';
      if (isHost) {
        // Bind re-roll for modal
        modalReroll.dataset.targetPlayerId = targetPlayerId;
        document.getElementById('modal-reroll-type').onchange = () => handleModalTypeChange();
        document.getElementById('modal-confirm-reroll').onclick = () => confirmModalReroll();
      }

      document.getElementById('player-modal').style.display = 'block';
    }

    function closeModal() {
      document.getElementById('player-modal').style.display = 'none';
      modalOpenPlayerId = null;
      exitModalReroll();
    }

    // Modal re-roll functions
    let modalRerollState = {
      type: '',
      arg: '',
      selectedCells: [],
      clickListener: null
    };

    function handleModalTypeChange() {
      const select = document.getElementById('modal-reroll-type');
      const type = select.value;
      modalRerollState.type = type;
      clearModalSelection();

      const instruct = document.getElementById('modal-selection-instruct');
      if (type === 'card') {
        instruct.style.display = 'none';
        selectModalCard();
      } else if (type) {
        instruct.style.display = 'block';
      } else {
        instruct.style.display = 'none';
      }

      const table = document.getElementById('modal-card');
      table.classList.add('reroll-mode');
      if (modalRerollState.clickListener) table.removeEventListener('click', modalRerollState.clickListener);
      const handleClick = (e) => handleModalCardClick(e);
      modalRerollState.clickListener = handleClick;
      table.addEventListener('click', handleClick);
    }

    function handleModalCardClick(e) {
      let td = e.target.closest('td');
      if (!td) return;

      const state = modalRerollState;
      if (!state || !state.type || state.type === 'card') return;

      const row = parseInt(td.dataset.row);
      const col = parseInt(td.dataset.col);
      if (isNaN(row) || isNaN(col)) return;

      clearModalSelection();

      let positions = [];
      let arg = '';

      switch (state.type) {
        case 'tile':
          positions = [[row, col]];
          arg = `${row + 1},${col + 1}`;
          break;
        case 'row':
          positions = Array.from({ length: 5 }, (_, c) => [row, c]);
          arg = `${row + 1}`;
          break;
        case 'column':
          positions = Array.from({ length: 5 }, (_, r) => [r, col]);
          arg = `${col + 1}`;
          break;
        case 'diagonal':
          const isMain = row === col;
          const isAnti = row + col === 4;
          if (!isMain && !isAnti) return;
          if (isMain && isAnti) { // Center
            arg = 'main';
            positions = Array.from({ length: 5 }, (_, i) => [i, i]);
          } else if (isMain) {
            arg = 'main';
            positions = Array.from({ length: 5 }, (_, i) => [i, i]);
          } else if (isAnti) {
            arg = 'anti';
            positions = Array.from({ length: 5 }, (_, i) => [i, 4 - i]);
          }
          break;
      }

      if (positions.length > 0) {
        state.arg = arg;
        state.selectedCells = positions;
        highlightModalSelection(positions);
      }
    }

    function selectModalCard() {
      const positions = Array.from({ length: 25 }, (_, i) => [Math.floor(i / 5), i % 5]);
      modalRerollState.arg = '';
      modalRerollState.selectedCells = positions;
      highlightModalSelection(positions);
    }

    function highlightModalSelection(positions) {
      const table = document.getElementById('modal-card');
      positions.forEach(([r, c]) => {
        table.rows[r].cells[c].classList.add('selected');
      });
    }

    function clearModalSelection() {
      const state = modalRerollState;
      const table = document.getElementById('modal-card');
      state.selectedCells.forEach(([r, c]) => {
        if (table.rows[r] && table.rows[r].cells[c]) {
          table.rows[r].cells[c].classList.remove('selected');
        }
      });
      state.selectedCells = [];
      state.arg = '';
    }

    function confirmModalReroll() {
      const state = modalRerollState;
      if (!state || !state.type || (state.type !== 'card' && !state.arg)) {
        alert('Please select a type and an area to re-roll.');
        return;
      }

      const targetPlayerId = document.getElementById('modal-reroll').dataset.targetPlayerId;
      window.socket.emit('reroll', {
        gameId,
        targetPlayerId,
        type: state.type,
        arg: state.arg
      });

      exitModalReroll();
    }

    function exitModalReroll() {
      const table = document.getElementById('modal-card');
      table.classList.remove('reroll-mode');
      if (modalRerollState.clickListener) table.removeEventListener('click', modalRerollState.clickListener);
      clearModalSelection();
      modalRerollState = { type: '', arg: '', selectedCells: [], clickListener: null };
      document.getElementById('modal-reroll-type').value = '';
    }

    // Drawer functions
    function toggleDrawer(contentType) {
      const drawer = document.getElementById('drawer');
      const drawerContent = drawer.querySelector('.drawer-content');
      drawerContent.innerHTML = '';
      if (drawer.style.bottom === '0px') {
        closeDrawer();
      } else {
        if (contentType === 'leaderboard') {
          const table = document.createElement('table');
          table.id = 'drawer-leaderboard';
          table.innerHTML = `
            <thead>
              <tr>
                <th>Rank</th>
                <th>Player</th>
                <th>Lines</th>
                <th>Stamped Tiles</th>
              </tr>
            </thead>
            <tbody></tbody>
          `;
          drawerContent.appendChild(table);
          updateDrawerLeaderboard(allPlayers);
        } // Add more for other types if needed
        drawer.style.bottom = '0px';
      }
    }

    function closeDrawer() {
      document.getElementById('drawer').style.bottom = '-100%';
    }

    function updateDrawerLeaderboard(players) {
      const leaderboardBody = document.querySelector('#drawer-leaderboard tbody');
      leaderboardBody.innerHTML = ''; // Clear existing

      // Compute scores (same as main leaderboard)
      const scoredPlayers = players.map(player => {
        const card = player.card;
        let score = 0;
        let stampedCount = 0;

        card.flat().forEach(tile => {
          if (tile.stamped) stampedCount++;
        });

        score += card.filter(row => row.every(t => t.stamped)).length;

        for (let col = 0; col < 5; col++) {
          let complete = true;
          for (let row = 0; row < 5; row++) {
            if (!card[row][col].stamped) {
              complete = false;
              break;
            }
          }
          if (complete) score++;
        }

        let mainComplete = true;
        let antiComplete = true;
        for (let i = 0; i < 5; i++) {
          if (!card[i][i].stamped) mainComplete = false;
          if (!card[i][4 - i].stamped) antiComplete = false;
        }
        if (mainComplete) score++;
        if (antiComplete) score++;

        return { id: player.id, name: player.name, score, stampedCount };
      });

      scoredPlayers.sort((a, b) => b.score - a.score || b.stampedCount - a.stampedCount);

      scoredPlayers.forEach((p, index) => {
        const tr = document.createElement('tr');
        const nameTd = `<td>${p.id === playerId ? p.name : `<span style="cursor: pointer; text-decoration: underline;" onclick="showPlayerCard('${p.id}')">${p.name}</span>`}</td>`;
        tr.innerHTML = `
          <td>${index + 1}</td>
          ${nameTd}
          <td>${p.score}</td>
          <td>${p.stampedCount}</td>
        `;
        leaderboardBody.appendChild(tr);
      });
    }
    // Swipe to close drawer on mobile via downward swipe gesture
    (function() {
      const drawerEl = document.getElementById('drawer');
      let drawerStartY = null;
      drawerEl.addEventListener('touchstart', function(e) {
        // Only start if drawer is open
        if (drawerEl.style.bottom === '0px') {
          drawerStartY = e.touches[0].clientY;
        }
      });
      drawerEl.addEventListener('touchmove', function(e) {
        if (drawerStartY === null) return;
        const touchY = e.touches[0].clientY;
        const delta = touchY - drawerStartY;
        if (delta > 50) {
          closeDrawer();
          drawerStartY = null;
        }
      });
    })();
  // Show/Hide functions for winner modal
  function showWinnerModal(playerName) {
    const modal = document.getElementById('winner-modal');
    document.getElementById('winner-modal-text').textContent = playerName + ' wins!';
    modal.style.display = 'flex';
  }
  function closeWinnerModal() {
    document.getElementById('winner-modal').style.display = 'none';
  }

  // Chat functionality
  (function() {
    const chatPanel = document.getElementById('chat-panel');
    const chatToggleDesktop = document.getElementById('chat-toggle-desktop');
    const chatToggleMobile = document.getElementById('chat-toggle-mobile');
    const chatCloseDesktop = document.getElementById('chat-close-desktop');
    const chatSend = document.getElementById('chat-send');
    const chatInput = document.getElementById('chat-input');
    const chatMessages = document.getElementById('chat-messages');
    const chatNotification = document.getElementById('chat-notification');
    const { players: chatPlayers, messages: chatHistory } = JSON.parse(document.getElementById('chat-data').textContent);
    const chatColors = {};
    const availableColors = ['#A3E635','#60A5FA','#F472B6','#FBBF24','#34D399','#F87171','#C084FC','#FCD34D','#38BDF8','#A78BFA'];
    chatPlayers.forEach((p,i) => { chatColors[p.id] = availableColors[i % availableColors.length]; });
    const chatNames = {};
    chatPlayers.forEach(p => { chatNames[p.id] = p.name; });

    function addChatMessage(msg) {
      const bubble = document.createElement('div');
      bubble.classList.add('chat-bubble', msg.playerId === playerId ? 'self' : 'other');
      bubble.style.backgroundColor = chatColors[msg.playerId] || '#ddd';
      // name header
      const header = document.createElement('div');
      header.classList.add('bubble-header');
      header.textContent = msg.playerId === playerId ? 'You' : chatNames[msg.playerId];
      bubble.appendChild(header);
      // message content
      const content = document.createElement('div');
      content.classList.add('bubble-content');
      content.textContent = msg.content;
      bubble.appendChild(content);
      // timestamp
      const time = document.createElement('div');
      time.classList.add('bubble-time');
      time.textContent = new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      bubble.appendChild(time);
      chatMessages.appendChild(bubble);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    chatHistory.forEach(addChatMessage);

    chatToggleDesktop.addEventListener('click', () => {
      chatPanel.classList.toggle('open');
      if (chatPanel.classList.contains('open')) chatNotification.style.display = 'none';
    });
    chatToggleMobile.addEventListener('click', () => {
      chatPanel.classList.toggle('open');
      if (chatPanel.classList.contains('open')) chatNotification.style.display = 'none';
    });
    chatCloseDesktop.addEventListener('click', () => chatPanel.classList.remove('open'));

    chatSend.addEventListener('click', () => {
      const content = chatInput.value.trim();
      if (!content) return;
      socket.emit('chat_message', { gameId, playerId, content });
      chatInput.value = '';
    });
    chatInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') { e.preventDefault(); chatSend.click(); }
    });

    socket.on('new_message', ({ message }) => {
      addChatMessage(message);
      if (!chatPanel.classList.contains('open')) chatNotification.style.display = 'block';
    });
  })();
  </script>
</body>
</html>